import java.io.*;
import java.util.List;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Collectors;

public class ReadUpdateCSVFast {
    public static void main(String[] args) {
        String csvFilePath = "/path/to/your/large_file.csv"; // Replace with the actual path to your CSV

        try (BufferedReader br = new BufferedReader(new FileReader(csvFilePath))) {
            List<String> lines = br.lines().collect(Collectors.toList());
            AtomicLong lineNumber = new AtomicLong(0);

            // Create a StringBuilder to build the modified CSV data
            StringBuilder modifiedCsvData = new StringBuilder();

            lines.forEach(line -> {
                String[] columns = line.split(","); // Assuming CSV columns are separated by commas
                if (columns.length >= 2) {
                    String nodeID = columns[0].trim();
                    String nodeDescription = columns[1].trim();

                    // Add your logic to calculate the new column value
                    String newColumnValue = "NewValue";

                    // Append the new column value to the line
                    modifiedCsvData.append(nodeID).append(",").append(nodeDescription).append(",").append(newColumnValue).append("\n");
                } else {
                    // Handle lines with insufficient columns here
                }
            });

            // Write the modified CSV data back to the same file
            try (BufferedWriter bw = new BufferedWriter(new FileWriter(csvFilePath))) {
                bw.write(modifiedCsvData.toString());
            } catch (IOException e) {
                e.printStackTrace();
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
