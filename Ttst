import org.springframework.extensions.webscripts.*;
import org.alfresco.service.cmr.repository.NodeService;
import org.alfresco.service.cmr.repository.StoreRef;
import org.alfresco.service.cmr.repository.NodeRef;
import org.alfresco.service.ServiceRegistry;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.Writer;
import java.util.concurrent.atomic.AtomicLong;
import java.util.List;
import java.util.stream.Collectors;

public class UpdateNodesWebScript extends AbstractWebScript {

    private ServiceRegistry serviceRegistry;

    public void setServiceRegistry(ServiceRegistry serviceRegistry) {
        this.serviceRegistry = serviceRegistry;
    }

    @Override
    public void execute(WebScriptRequest req, WebScriptResponse res) throws IOException {
        String csvFilePath = "/path/to/your/large_file.csv"; // Replace with the actual server path to your CSV file

        res.setContentType("text/plain"); // Set the response content type

        NodeService nodeService = serviceRegistry.getNodeService();
        StoreRef storeRef = new StoreRef(StoreRef.PROTOCOL_WORKSPACE, "SpacesStore");

        try (BufferedReader br = new BufferedReader(new FileReader(csvFilePath));
             Writer writer = res.getWriter()) {

            List<String> lines = br.lines().collect(Collectors.toList());
            AtomicLong lineNumber = new AtomicLong(0);

            lines.parallelStream().forEach(line -> {
                String[] columns = line.split(","); // Assuming CSV columns are separated by commas

                if (columns.length >= 2) {
                    String nodeId = columns[0].trim();
                    String nodeDescription = columns[1].trim();

                    try {
                        // Retrieve the NodeRef based on the Node ID (assuming a specific location)
                        NodeRef nodeRef = new NodeRef(storeRef, nodeId);

                        // Check if the node exists before updating
                        if (nodeService.exists(nodeRef)) {
                            // Update the node with the new description
                            nodeService.setProperty(nodeRef, "cm:description", nodeDescription);
                            nodeService.saveNode(nodeRef);
                            writer.write("Node updated: " + nodeId + "\n");
                        } else {
                            writer.write("Node not found: " + nodeId + "\n");
                        }
                    } catch (Exception e) {
                        writer.write("Error updating Node ID " + nodeId + ": " + e.getMessage() + "\n");
                    }
                } else {
                    writer.write("Invalid CSV row: " + line + "\n");
                }
            });
        } catch (IOException e) {
            throw new WebScriptException("Error reading CSV file: " + e.getMessage());
        }
    }
}
